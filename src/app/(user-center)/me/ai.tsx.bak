"use client"

import { useNavbar } from '@/contexts/NavbarContext/NavbarContext';
import { useEffect, useState } from 'react';
import {
  Title,
  Paper,
  Grid,
  TextInput,
  Textarea,
  RadioGroup,
  Radio,
  Select,
  Button,
  Group,
  Breadcrumbs,
  Anchor,
  Box,
  Card,
  CardSection,
  Text,
  Divider
} from '@mantine/core';
import { DatePicker } from '@mantine/dates';
import { IconChevronRight } from '@tabler/icons-react';

// 定义城市数据类型
interface OptionType {
  value: string;
  label: string;
}

// 定义省份值类型
type ProvinceValue = 'beijing' | 'shanghai' | 'guangdong';

// 模拟省市数据
const provinces: OptionType[] = [
  { value: 'beijing', label: '北京' },
  { value: 'shanghai', label: '上海' },
  { value: 'guangdong', label: '广东' },
];

const cities: Record<ProvinceValue, OptionType[]> = {
  beijing: [
    { value: 'chaoyang', label: '朝阳区' },
    { value: 'haidian', label: '海淀区' },
  ],
  shanghai: [
    { value: 'pudong', label: '浦东新区' },
    { value: 'huangpu', label: '黄浦区' },
  ],
  guangdong: [
    { value: 'shenzhen', label: '深圳市' },
    { value: 'guangzhou', label: '广州市' },
  ],
};

// 定义用户信息类型
interface UserInfo {
  nickname: string;
  signature: string;
  gender: 'male' | 'female' | 'other';
  birthday: Date | null;
  province: ProvinceValue;
  city: string;
  address: string;
}

// 模拟用户初始数据
const initialUserInfo: UserInfo = {
  nickname: '张三',
  signature: '热爱生活，热爱编程',
  gender: 'male',
  birthday: new Date('1990-01-01'),
  province: 'guangdong',
  city: 'shenzhen',
  address: '科技园南区100号',
};

const SettingsPage = () => {
  const { setActive, setSection } = useNavbar();
  const [userInfo, setUserInfo] = useState<UserInfo>(initialUserInfo);
  const [selectedProvince, setSelectedProvince] = useState<ProvinceValue>(initialUserInfo.province);
  const [selectedCity, setSelectedCity] = useState<string>(initialUserInfo.city);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);

  // 设置导航状态
  useEffect(() => {
    setActive('Profile');
    if (setSection) {
      setSection('Account');
    }
  }, [setActive, setSection]);

  // 处理省份变化
  const handleProvinceChange = (value: ProvinceValue) => {
    setSelectedProvince(value);
    const defaultCity = cities[value][0].value;
    setSelectedCity(defaultCity);
    setUserInfo(prev => ({
      ...prev,
      province: value,
      city: defaultCity,
    }));
  };

  // 处理城市变化
  const handleCityChange = (value: string) => {
    setSelectedCity(value);
    setUserInfo(prev => ({ ...prev, city: value }));
  };

  // 处理表单输入变化
  const handleInputChange = (field: keyof UserInfo, value: string | Date | null) => {
    setUserInfo(prev => ({
      ...prev,
      [field]: value as UserInfo[keyof UserInfo]
    }));
  };

  // 处理表单提交
  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      // 模拟API请求
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('提交用户信息:', userInfo);
      // 实际项目中这里会调用API保存数据
    } catch (error) {
      console.error('提交失败:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Box component="div" sx={{ padding: '1rem' }}>
      {/* 面包屑 */}
      <Breadcrumbs mb="md" separator={<IconChevronRight size={16} />}>
        <Anchor href="/">首页</Anchor>
        <Anchor href="/me">个人中心</Anchor>
        <Text>个人资料</Text>
      </Breadcrumbs>

      {/* 页面容器 */}
      <Paper withBorder p="lg" radius="md">
        {/* 页面容器 - 标题 */}
        <Box mb="lg">
          <Title order={2}>个人资料设置</Title>
          <Text size="sm" color="dimmed">
            完善您的个人信息，让我们更好地了解您
          </Text>
        </Box>

        <Divider mb="lg" />

        {/* 页面内容 - 表单 */}
        <Grid gap={Grid.GAP_LG}>
          <Grid.Col span={{ base: 12, md: 6 }}>
            {/* 昵称（文本） */}
            <TextInput
              label="昵称"
              placeholder="请输入您的昵称"
              value={userInfo.nickname}
              onChange={(e) => handleInputChange('nickname', e.target.value)}
              mb="md"
            />

            {/* 个人签名(textarea) */}
            <Textarea
              label="个人签名"
              placeholder="请输入您的个人签名"
              value={userInfo.signature}
              onChange={(e) => handleInputChange('signature', e.target.value)}
              minRows={3}
              mb="md"
            />

            {/* 性别 (radio) */}
            <RadioGroup
              label="性别"
              value={userInfo.gender}
              onChange={(value) => value && handleInputChange('gender', value)}
              mb="md"
            >
              <Group>
                <Radio value="male" label="男" />
                <Radio value="female" label="女" />
                <Radio value="other" label="其他" />
              </Group>
            </RadioGroup>

            {/* 出生日期 (datepicker) */}
            <DatePicker
              label="出生日期"
              value={userInfo.birthday}
              onChange={(date) => handleInputChange('birthday', date || null)}
              format="YYYY-MM-DD"
              mb="md"
            />
          </Grid.Col>

          <Grid.Col span={{ base: 12, md: 6 }}>
            {/* 位置 - 省市联动 (下拉框) */}
            <Grid gap={Grid.GAP_MD} mb="md">
              <Grid.Col span={{ base: 12, sm: 6 }}>
                <Select<ProvinceValue>
                  label="省份"
                  value={selectedProvince}
                  onChange={handleProvinceChange}
                  data={provinces}
                />
              </Grid.Col>
              <Grid.Col span={{ base: 12, sm: 6 }}>
                <Select<string>
                  label="城市"
                  value={selectedCity}
                  onChange={handleCityChange}
                  data={cities[selectedProvince] || []}
                  disabled={!selectedProvince}
                />
              </Grid.Col>
            </Grid>

            {/* 详细地址 (文本) */}
            <TextInput
              label="详细地址"
              placeholder="请输入详细地址"
              value={userInfo.address}
              onChange={(e) => handleInputChange('address', e.target.value)}
              mb="md"
            />

            {/* 头像上传区域 */}
            <Card mb="md">
              <CardSection>
                <Box sx={{ textAlign: 'center' }}>
                  <Title order={5} mb="sm">头像设置</Title>
                  <Box
                    sx={{
                      width: 120,
                      height: 120,
                      borderRadius: '50%',
                      backgroundColor: '#f0f0f0',
                      margin: '0 auto',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      overflow: 'hidden',
                    }}
                  >
                    <img
                      src="/avatar_default.png"
                      alt="用户头像"
                      style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                    />
                  </Box>
                  <Button variant="outline" mt="md">
                    上传新头像
                  </Button>
                </Box>
              </CardSection>
            </Card>
          </Grid.Col>

          {/* 表单按钮 */}
          <Grid.Col span={12}>
            <Group justify="flex-end" mt="lg">
              <Button variant="outline" mr="md">
                取消
              </Button>
              <Button onClick={handleSubmit} loading={isSubmitting}>
                保存设置
              </Button>
            </Group>
          </Grid.Col>
        </Grid>
      </Paper>
    </Box>
  );
};

export default SettingsPage;
